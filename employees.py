"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <FULL NAME> and <FULL NAME>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:
UT EID 2:
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


# TODO: implement this class. You may delete this comment when you are done.
class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self._performance = INITIAL_PERFORMANCE
        self._happiness = INITIAL_HAPPINESS
        self._salary = salary
    
    @property
    def name(self):
        return self.__name
    @property
    def manager(self):
        return self.__manager
    @property
    def happiness(self):
        return self._happiness
    @property
    def performance(self):
        return self._performance
    @performance.setter
    def performance(self, perf_scale):
        if perf_scale < PERCENTAGE_MIN:
            self._performance = PERCENTAGE_MIN
        elif perf_scale > PERCENTAGE_MAX:
            self._performance = PERCENTAGE_MAX
        else:
            self._performance = perf_scale
    @property
    def salary(self):
        return self._salary
    @salary.setter
    def salary(self, salary_value):
        if salary_value < 0:
            return ValueError(SALARY_ERROR_MESSAGE)
        self._salary = salary_value
    @abstractmethod
    def work(self):
        pass
    def interact(self, other):
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self._happiness += 1
        elif self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self._happiness -= 1
        else:
            self.relationships[other.name] -= 1
            self._happiness -= 1
    def daily_expense(self):
        self._happiness -= 1
        self.savings -= DAILY_EXPENSE
    def __str__(self):
        return f"{self.name}\nSalary: ${self.salary}\nSavings: ${self.savings}\nHappiness: {self.happiness}%\nPerformance: {self.performance}%"


# TODO: implement this class. You may delete this comment when you are done.
class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        man_change = random.randint(-5, 5)
        self._performance += man_change
        if man_change <= 0:
            self.happiness -= 1
            for employee in self.relationships:
                self.relationships[employee.name] -= 1
        else:
            self.happiness += 1



# TODO: implement this class. You may delete this comment when you are done.
class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        temp_change = random.randint(-15, 15)
        self.performance += temp_change
        if temp_change <= 0:
            self.happiness -= 2
    def interact(self, other):
        super().interact(other)
        if other is self.manager:
            if other.happiness > HAPPINESS_THRESHOLD and self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.salary //= 2
                self.happiness -= 5
                if self.salary == 0:
                    self.is_employed = False

# TODO: implement this class. You may delete this comment when you are done.
class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self):
        perm_change = random.randint(-10, 10)
        self.performance += perm_change
        if perm_change >= 0:
            self.happiness += 1
    def interact(self, other):
        super().interact(other)
        if other is self.manager:
            if other.happiness > HAPPINESS_THRESHOLD and self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1

